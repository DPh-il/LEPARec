[
    {
        "concept_name": "n元关联",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "多个类之间的关联。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "n-ary association"
        }
    },
    {
        "concept_name": "万维网工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "创建基于万维网的系统与应用的软件工程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Web engineering"
        }
    },
    {
        "concept_name": "万维网服务定义语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "适用到2007年为止。使用XML描述给定万维网服务的有关操作和消息，供需求服务者调用，但未经万维网联盟（W3C）组织授权发布。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Web service definition language"
        }
    },
    {
        "concept_name": "万维网服务语义标注",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用万维网本体语言（OWL）编写的一个描述万维网服务的本体。包括三个部分：支持推介和搜索万维网服务的服务外廓、描述服务操作细节的过程模型，以及描述如何与服务进行互操作的基础模块。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "semantic markup for Web services"
        }
    },
    {
        "concept_name": "万维网本体语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "Web ontology language ;OWL",
            "定义": "W3C授权发布的一种基于RDF、XML的、具有形式化语义的、用来编写本体的知识表示语言族，是语义网工具的组成部分。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Web ontology language"
        }
    },
    {
        "concept_name": "不交付项",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "按合同不需要交付的，但在软件的开发中可能用到的硬件和软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "non-deliverable item"
        }
    },
    {
        "concept_name": "不完全排错",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件中故障没有完全被排除并且有可能引入新的故障。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "imperfect debugging"
        }
    },
    {
        "concept_name": "个体软件过程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种制度化的、数据驱动的过程。用于帮助软件工程师提高其个人从事软件开发工作的效率。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "personal software process"
        }
    },
    {
        "concept_name": "主动对象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "不需要接收消息便可执行其自身行为的对象。即一种拥有自己的控制线程的对象。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "active object"
        }
    },
    {
        "concept_name": "主动类",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "其实例为主动对象的类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "active class"
        }
    },
    {
        "concept_name": "二元关联",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "两个类之间的关联。 n 元关联的特例。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "binary association"
        }
    },
    {
        "concept_name": "互操作性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "两个或多个系统或构件之间交换信息和使用对方信息的能力。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interoperability"
        }
    },
    {
        "concept_name": "交互图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "描述对象之间或对象与系统的参与者之间如何进行交互的图，有许多种类，例如统一建模语言（UML）的顺序图、通信图、交互概览图和定时图。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interaction diagram"
        }
    },
    {
        "concept_name": "交互式系统",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于人机交互界面技术而构建的系统。系统的功能通过用户与本地计算机或者网络上的计算设备进行交互来实现。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interactive system"
        }
    },
    {
        "concept_name": "交互概览图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种交互图。可将许多交互片段组织在一个图中，从而在较大的范围内表现系统的行为。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interaction overview diagram"
        }
    },
    {
        "concept_name": "产品分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对一组包含共性需求的软件产品进行分析的过程。其目的是确定标准的、可复用的软件产品线构架。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "product analysis"
        }
    },
    {
        "concept_name": "产品工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "通过对标准的产品线构架进行定制，并将可复用构件与系统特有的成分集成的方式进行软件系统开发的工程方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "product engineering"
        }
    },
    {
        "concept_name": "产品标准",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在产品工程中定制特定应用系统时，为了满足标准产品线构架的需求所制定的规则和约定的集合。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "product standard"
        }
    },
    {
        "concept_name": "产品线构架",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对隶属于同一软件产品线的一系列软件产品进行统一刻画的软件体系结构。体现了软件产品线产品的共性和变化性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "product line architecture"
        }
    },
    {
        "concept_name": "代数规约",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于代数语义，对系统或者系统模块进行的形式规约。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "algebraic specification"
        }
    },
    {
        "concept_name": "代理模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。为对象提供了一种访问代理，以控制客户程序对它的访问。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "proxy pattern"
        }
    },
    {
        "concept_name": "代码审查",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种正式的审查活动。通过由作者之外的人组成检查小组，检查程序中的错误、对相关标准的违反和其他问题。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "code inspection"
        }
    },
    {
        "concept_name": "代码审计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "由人工或借助某种工具对源代码进行的独立的审查。其目的是验证其是否符合软件设计文档和程序设计标准，还可能对正确性和有效性进行估计。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "code audit"
        }
    },
    {
        "concept_name": "仿真器",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设备、计算机程序或系统。它接受与给定的被仿真系统同样的输入并产生同样的输出。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "emulator"
        }
    },
    {
        "concept_name": "企业体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "反映企业运营规律的标准化业务流程、组织逻辑和IT基础设施体系结构。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "enterprise architecture"
        }
    },
    {
        "concept_name": "企业应用集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "enterprise application integration ;EAI",
            "定义": "将已有的若干企业应用系统进行连接和整合，使其彼此之间可进行互操作和数据共享，可分为消息集成、数据集成、流程集成和人机接口集成多个层次。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "enterprise application integration"
        }
    },
    {
        "concept_name": "体系结构建模",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "使用体系结构建模符号建立软件体系结构模型的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architecture modeling"
        }
    },
    {
        "concept_name": "体系结构描述语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "architecture description language ;ADL",
            "定义": "一种规范化地描述体系结构的语言。用于在高层抽象上描述构成软件系统的构件、构件之间的关系以及构件组合的相关约束。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architecture description language"
        }
    },
    {
        "concept_name": "体系结构编档",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为软件编写体系结构文档的活动。文档中一般使用多个视图来对体系结构进行描述，以满足不同使用者的要求。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architecture documentation"
        }
    },
    {
        "concept_name": "体系结构视图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "从特定使用者（最终用户、开发者、项目管理者等）的视角，对软件系统的体系结构所做的描述。完整的体系结构模型由多个体系结构视图构成。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architectural view"
        }
    },
    {
        "concept_name": "体系结构设计决策",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "选择适用的体系结构及其可选项的过程。可选项的选择取决于软件需求，通过对体系结构中构件的增加、删减和修改来完成，还要考虑到设计规则、设计约束和附加的各种条件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architectural design decision"
        }
    },
    {
        "concept_name": "体系结构配置",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在软件体系结构模型中，对体系结构的组成成分、各个成分之间的连接关系及其约束的描述。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "architecture configuration"
        }
    },
    {
        "concept_name": "使用质量",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于用户观点所看到的软件产品在用于指定的使用环境和条件时的质量。包括软件产品在特定环境中能达到的有效性、可靠性和安全性等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "quality in use"
        }
    },
    {
        "concept_name": "信息隐蔽",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "抽象数据类型、面向对象等技术中提倡的一种原则：一个数据类型、对象或模块的内部数据只能由它自身的操作所访问，对外是隐蔽的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "information hiding"
        }
    },
    {
        "concept_name": "元对象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "元建模语言中所有元实体（例如元类型、元类、元属性和元关联）的总称。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "meta object"
        }
    },
    {
        "concept_name": "元对象设施",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "meta object facility ;MOF",
            "定义": "对象管理组织（OMG）的一个技术规范。为统一建模语言（UML）、通用对象请示代理体系结构（CORBA）等与对象技术有关的规范定义了一组公共的基础设施，作为它们的元-元模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "meta object facility"
        }
    },
    {
        "concept_name": "元模型体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "元对象机制（MOF）、统一建模语言（UML）等对象管理组织（OMG）规范中为各个层次的模型及其实例所定义的体系结构框架。其中包括元-元模型、元模型、模型和用户对象4个层次。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "meta model architecture"
        }
    },
    {
        "concept_name": "共享执行系统",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在分布式系统中共享的执行系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "shared executive system"
        }
    },
    {
        "concept_name": "关联",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "类之间的一个关系。即这些类的对象实例集合的笛卡儿积的一个子集合，其中的元素提供了应用领域中一组有意义的信息。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "association"
        }
    },
    {
        "concept_name": "关联类",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种兼有关联与类双重性质的模型元素。既可视为具有类性质的关联，又可视为具有关联性质的类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "association class"
        }
    },
    {
        "concept_name": "关键过程域",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "key process area ;KPA",
            "定义": "软件过程中的一组相关的活动。当这些活动全部完成时，对建立过程能力至关重要的一组目标就能实现。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "key process area"
        }
    },
    {
        "concept_name": "兴趣小组",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "community-of-interest ;CoI",
            "定义": "一类具有相同或相似兴趣爱好的人所构成的群体。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "community-of-interest"
        }
    },
    {
        "concept_name": "具体类",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "被用来直接创建对象实例的类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "concrete class"
        }
    },
    {
        "concept_name": "内在故障",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "由于程序代码自身存在的缺陷而导致的软件故障。这种故障不是通过故障撒播而故意插入的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "indigenous fault"
        }
    },
    {
        "concept_name": "冒烟测试",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在正式测试之前，对简单的、基础的程序失效情况进行检测。常用于在程序版本发生变更时，确认新版本程序的基本功能是否正常。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "smoke testing"
        }
    },
    {
        "concept_name": "净室软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种支持软件可靠性验证的软件工程方法。其主要特点是基于形式化方法进行软件规约和校验，以及基于统计进行软件质量控制和正确性测试。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "cleanroom software engineering"
        }
    },
    {
        "concept_name": "分布式计算环境",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "支持分布式计算的软硬件系统。用于支持分布式系统的应用程序的开发和运行。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "distributed computing environment"
        }
    },
    {
        "concept_name": "分支测试",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种测试技术。在执行时通过遍历被测程序的各个分支来发现程序中的错误。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "branch testing"
        }
    },
    {
        "concept_name": "分析模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在软件开发过程中，为了分析软件功能和特性，通过对问题域的抽象而构建的模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "analysis model"
        }
    },
    {
        "concept_name": "分析阶段",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 需求阶段",
            "定义": "软件生命周期中的一个阶段。对软件系统的需求进行分析，从而提出完整、准确、清晰、具体的要求，确定软件系统必须完成的工作。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "analysis phase"
        }
    },
    {
        "concept_name": "制品",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在软件开发或系统的部署与操作中使用或产生的信息的物理片段。例如模型文件、源文件、草稿、二进制执行文件、数据库表、开发中交付或者书写的文档、邮件消息等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "artifact"
        }
    },
    {
        "concept_name": "功能点",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一个用来表示信息系统为用户提供业务功能的单位。功能点的数量和质量可以用来度量信息系统的规模、能力、估价等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "function point"
        }
    },
    {
        "concept_name": "功能需求",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用户或其他利益相关者对软件产品所应提供的功能提出的要求。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "functional requirements"
        }
    },
    {
        "concept_name": "动态体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种可描述并模拟软件系统在结构上动态变化的软件体系结构。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "dynamic architecture"
        }
    },
    {
        "concept_name": "动态分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "收集系统运行时相关数据并进行分析的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "dynamic analysis"
        }
    },
    {
        "concept_name": "包图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "表示系统中的各个包以及它们之间的关系的图。其中每个包是将一组模型元素组织在一起所形成的粒度较大的系统单位。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "package diagram"
        }
    },
    {
        "concept_name": "协同软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。作为传统软件工程的发展和延伸,主要解决团队合作中体现的协同性。以协同软件开发过程模型为出发点,开发者可以更好地分析、创建、管理和同步实现分工后的子软件开发任务。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "collaborative software engineering"
        }
    },
    {
        "concept_name": "单件模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。保证一个类只有一个实例，并提供一个全局性的访问点。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "singleton pattern"
        }
    },
    {
        "concept_name": "单元测试",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对构成软件的基本单元如过程、函数等进行的测试。一般在将被测试单元与程序的其他部分相隔离的情况下进行。通常采用白盒测试技术。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "unit testing"
        }
    },
    {
        "concept_name": "单继承",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种继承机制。其中每个子类只能继承单一的超类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "single inheritance"
        }
    },
    {
        "concept_name": "原型开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "构造原型系统的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "prototype development"
        }
    },
    {
        "concept_name": "原型模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。使用一个原型来刻画要创建类的类型，通过复制这个原型得到新的类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "prototype pattern"
        }
    },
    {
        "concept_name": "参数化元素",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "带有一个或多个未绑定参数的类的描述符。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "parameterized element"
        }
    },
    {
        "concept_name": "可扩展性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "系统或部件可以通过修订而增加其功能或存储与处理能力的程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "extendability"
        }
    },
    {
        "concept_name": "可演化性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件在应用需求和环境变化时，可自行或人为演化的能力。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "evolveable"
        }
    },
    {
        "concept_name": "可理解性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件的一个质量特性。它指软件的结构、功能、相关文档、数据及其细节能被该软件作者以外的其他人所理解的难易程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "understandability"
        }
    },
    {
        "concept_name": "可用性模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种预测系统提供正常服务的时间占系统总的运行时间的比例的模型，用于衡量系统为用户提供可接受的服务质量的能力。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "availability model"
        }
    },
    {
        "concept_name": "可移植性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 便携性",
            "定义": "软件从某一环境转移到另一环境下的难易程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "portability"
        }
    },
    {
        "concept_name": "可靠性评估",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对在规定的时间和条件下，计算机系统完成规定功能和维持规定性能能力的评估过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "reliability assessment"
        }
    },
    {
        "concept_name": "名字空间",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "模型或程序中一个可定义和使用名称的区域。其中的每个名称都具有唯一的含义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "namespace"
        }
    },
    {
        "concept_name": "向上兼容",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 向前兼容",
            "定义": "（1）原有设备能够使用后期的新设备所产生的输出。（2）为新版本软硬件环境所创建的程序能够在旧版本软硬件环境中运行，或者新版本程序产生的数据和文档能够被旧版本程序使用。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "upward compatibility"
        }
    },
    {
        "concept_name": "因果图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于将一组原因映射到一组结果上的有向图。通常系统的输入作为原因结点放在图的左边，输出作为结果结点放在图的右边，中间结点是使用逻辑“与”“或”操作连接的输入结点的组合。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "cause effect graph"
        }
    },
    {
        "concept_name": "团队软件过程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件过程框架。目的是协调团队成员分别承担的开发工作，帮助整个团队改善其质量和生产率，以使其更好地满足成本及进度的目标。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "team software process"
        }
    },
    {
        "concept_name": "基于XML的元数据交换",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "XML-based metadata interchange ;XMI",
            "定义": "一种使用可扩展的标注语言（XML），为程序员和其他用户提供元数据信息交换的方法。其目的是帮助使用不同语言和开发工具的程序员彼此交换数据模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "XML-based metadata interchange"
        }
    },
    {
        "concept_name": "基于万维网的系统与应用",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "Web-based systems and applications ;WebApp",
            "定义": "驻留在万维网服务器之上，为终端用户提供内容和功能服务的系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Web-based systems and applications"
        }
    },
    {
        "concept_name": "基于价值的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。将软件能否有效地为利益相关者带来价值作为解决软件工程中各种决策问题的核心原则。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "value-based software engineering"
        }
    },
    {
        "concept_name": "基于场景的需求建模",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种需求建模方法。对软件系统与外部实体之间的交互以及相关外部实体之间的交互进行识别、划分与建模。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "scenario-based requirements modeling"
        }
    },
    {
        "concept_name": "基于搜索的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。将软件开发中的相关问题转化为优化问题，进而采用遗传算法、模拟退火算法等搜索算法对问题进行求解。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "search-based software engineering"
        }
    },
    {
        "concept_name": "基于构件的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种基于构件复用的软件工程和方法。通过定义、实现构件，以及组合已有的和新开发的构件，高效率、高质量地构造应用软件系统的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "component-based software engineering"
        }
    },
    {
        "concept_name": "基于知识的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。在软件开发过程中采用知识工程手段，将软件需求逐步转化为软件实现。通常以知识化的需求表达为起点，以知识库为基础，以知识的形式化表达方法为主要技术手段。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "knowledge-based software engineering"
        }
    },
    {
        "concept_name": "基于证据的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。通过对相关软件和技术的实际或理论效用的证据进行收集和分析，指导各种决策和开发活动的实施。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "evidence-based software engineering"
        }
    },
    {
        "concept_name": "基础设施",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）为一类软件系统的开发或运行所提供的基础性的软件设施，通常以服务或应用接口的方式呈现。（2）在软件技术标准和规范体系中，为建立这些标准或规范而定义的一组基本概念及其使用规则。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "infrastructure"
        }
    },
    {
        "concept_name": "基础设施即服务",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "infrastructure as a service ;IaaS",
            "定义": "将基础设施，包括处理能力、存储、网络和其他计算资源，作为一种服务提供给用户使用，使后者可以在其上部署和运行包括操作系统和应用在内的任意软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "infrastructure as a service"
        }
    },
    {
        "concept_name": "基线",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件文档或源码（或其他产出物）的一个稳定版本。一般经过证实审核和同意，可作为进一步开发的基础。对基线的更改必须遵循变更控制规程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "baseline"
        }
    },
    {
        "concept_name": "增量开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件开发技术。其需求分析、设计、实现和测试过程反复进行多次，使整个软件产品以逐步递增的方式完成。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "incremental development"
        }
    },
    {
        "concept_name": "增量模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件过程模型。融合了瀑布模型的基本成分（重复应用）和原型实现的迭代特征，采用随着日程时间的进展而交错的线性序列，每一个线性序列产生软件的一个可发布的“增量”。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "incremental model"
        }
    },
    {
        "concept_name": "备忘录模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。在不破坏封装的条件下，获得一个对象的内部状态并保存在对象之外，以便在需要时恢复对象状态。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "memento pattern"
        }
    },
    {
        "concept_name": "复用库互操作组织",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "reuse library interoperability group ;RLIG",
            "定义": "一个自愿的、基于共识的、其成员来自政府、学术界和产业界的组织。其目的是为了合作制定复用软件库的互操作性标准。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "reuse library interoperability group"
        }
    },
    {
        "concept_name": "外部质量",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件产品外部属性的总和，决定了软件在预期条件下使用时，满足外显和隐含需求的程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "external quality"
        }
    },
    {
        "concept_name": "多继承",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种继承机制。其中一个子类可同时继承多个超类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "multiple inheritance"
        }
    },
    {
        "concept_name": "委派连接件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种连接件。将构件对外提供的接口连接到构件内部具体实现该接口的部件，或者将构件所需要的接口连接到构件内部使用该接口的部件，从而清晰地表示构件的内部成分与外部接口之间的关系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "delegation connector"
        }
    },
    {
        "concept_name": "安全测试",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用来检查系统内的保护机制是否能够在实际中保护系统不受到非法侵入的测试。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "security testing"
        }
    },
    {
        "concept_name": "安全认证机构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为信息安全领域从事产品、电子商务等活动提供一个中立、公正、值得信赖的第三方安全认证服务的机构。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "safety certification authority"
        }
    },
    {
        "concept_name": "实例",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）由一个类所描述和创建的对象。（2）由一个类型刻画的数据集合中的一个元素。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "instance",
            "prerequisite": [
                "K_ML语言_计算机科学技术",
                "K_赋值语句_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "实现阶段",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件生命周期的一个阶段。将软件设计的结果转换成计算机可运行的程序代码。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "implementation phase"
        }
    },
    {
        "concept_name": "实用软件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为其他应用软件、操作系统或系统用户提供某些通用支持功能的软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "utility software"
        }
    },
    {
        "concept_name": "客户-服务器体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种面向网络应用的体系结构。把系统中的不同结点区分为客户和服务器两类，客户向服务器发出服务请求，由服务器完成所请求的服务，并把处理结果回送给客户。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "client-server architecture"
        }
    },
    {
        "concept_name": "富互联网应用",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "rich internet application ;RIA",
            "定义": "一类具有传统桌面应用特征的、用户体验更为丰富的新型互联网应用。通常基于浏览器插件、虚拟机或沙盒等机制来构造。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "rich internet application"
        }
    },
    {
        "concept_name": "对象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "由一组属性和一组操作所构成的封装体。描述了现实世界或计算机系统中一个物理的或逻辑的事物，其属性和操作分别描述了事物的静态特征和动态特征。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object"
        }
    },
    {
        "concept_name": "对象图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于表示系统中的对象以及它们之间关系的图。在UML中专指由对象、链等实例级元素所构成的图。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object diagram"
        }
    },
    {
        "concept_name": "对象生命线",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在统一建模语言UML 1的各种交互图中对一个对象（或其他实体）的生存期的表示。在UML 2版本中简称为生命线（lifeline）。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object lifeline"
        }
    },
    {
        "concept_name": "对象约束语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object constraint language ;OCL",
            "定义": "一种形式化的模型描述语言。用于描述统一建模语言（UML）模型的细节，既是UML规范的组成部分，也可视为一种独立的语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object constraint language"
        }
    },
    {
        "concept_name": "导入",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）将当前系统之外的某个指定位置上的一批数据输入到系统中。（2）一种改变元素可见性的表示法，使其他作用域或名字空间的元素可以在本作用域或名字空间内被直接引用。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "import"
        }
    },
    {
        "concept_name": "导出",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）将当前系统中的一批数据输出到系统之外的某个指定位置。（2）一种改变元素可见性的表示法，使一个作用域或名字空间内部的元素对于该作用域或名字空间之外是可见的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "export"
        }
    },
    {
        "concept_name": "导出元素",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "其值可以从其他元素通过计算或推导而得到的模型元素。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "derived element"
        }
    },
    {
        "concept_name": "封装",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "将对象的属性和操作（或其他软件成分）结合成一个独立的系统单位，并尽可能隐蔽其内部细节。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "encapsulation"
        }
    },
    {
        "concept_name": "嵌入式软件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "以微指令形式嵌入在硬件设备中运行的软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "embedded software"
        }
    },
    {
        "concept_name": "工作分解结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种描述项目总体工作的结构。以可交付成果为中心，将项目中所涉及的工作进行分解，定义出项目的总体工作范围。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "work breakdown structure"
        }
    },
    {
        "concept_name": "幂类型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种类型。它的每个实例是另一个类型的一个子类型。该子类型刻画了其父类型的实例集合的一个子集合。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "powertype"
        }
    },
    {
        "concept_name": "平台即服务",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "platform as a service ;PaaS",
            "定义": "将支撑平台，包括编程语言、操作系统和软件工具，作为一种服务提供给用户使用，使后者能把自己获取或创建的应用部署到该平台上。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "platform as a service"
        }
    },
    {
        "concept_name": "平台无关模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "platform independent model ;PIM",
            "定义": "不依赖于具体平台和技术的模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "platform independent model"
        }
    },
    {
        "concept_name": "并行程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种适应于在多个处理器上并行计算的程序设计方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "parallel programming"
        }
    },
    {
        "concept_name": "应用软件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于实现用户的特定领域、特定问题的应用需求而非解决计算机本身问题的软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "application software"
        }
    },
    {
        "concept_name": "应用集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为实现应用软件之间的信息共享和业务协同，而将多个应用软件中的数据和程序整合起来的活动。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "application integration"
        }
    },
    {
        "concept_name": "建议",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "面向方面程序中实现横切关注点的代码。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "advice"
        }
    },
    {
        "concept_name": "开发方法学",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "指导软件系统开发的系统化方法。它明确软件的开发过程，规定每个阶段的活动、产品、表示语言、验证步骤和完成准则。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "development methodology"
        }
    },
    {
        "concept_name": "开放体系结构框架",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "open architecture framework ;OAF",
            "定义": "一种软件体系结构框架，使软件具有较高的可扩展性、可剪裁性、可移植性和各结点之间互操作性等特点，并易于从多方获得其软件成分。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "open architecture framework"
        }
    },
    {
        "concept_name": "开放源码",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种将源代码公开的产品开发模式。对于软件而言，开源软件需遵循开源软件创始行动组织（OSI）制定的开放源码认定标准。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "open source"
        }
    },
    {
        "concept_name": "开源软件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种将软件的源代码公开发布的计算机软件。通常允许用户对软件的源代码进行查看、修改、传播等操作，但其源代码的所有权仍属于版权所有者。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "open source software"
        }
    },
    {
        "concept_name": "异步JavaScript和XML技术",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " AJAX技术(AJAX)",
            "定义": "一种在客户端创建交互式网络应用的开发技术。可以快速创建动态网页，在不加载整个网页的情况下，对网页进行部分更新。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "asynchronous JavaScript and XML"
        }
    },
    {
        "concept_name": "引入",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在面向方面程序设计中针对接口添加新的方法，或者针对现有的类添加新的方法或属性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "introduce"
        }
    },
    {
        "concept_name": "强一致性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在分布式系统中各个结点的数据在任何时刻保持一致。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "strong consistency"
        }
    },
    {
        "concept_name": "快速原型法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件开发方法。在开发前期快速制作出目标软件系统的初步版本，称为原型，通过原型收集用户的反馈，并根据反馈对目标系统的需求进行完善或精化。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "rapid prototyping"
        }
    },
    {
        "concept_name": "性能规约",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "规定软件系统或构件必须具有的性能特征的文档。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "performance specification"
        }
    },
    {
        "concept_name": "扩展点",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）软件或者软件框架中专门设置的，可供其他开发人员进行功能扩展的点。（2）用况图中，可插入附加行为，实现用况扩展的点。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "expansion joints"
        }
    },
    {
        "concept_name": "抽象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "从事物中抽取出所关心、本质性的要素，而舍弃其非本质、不关注的要素。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "abstraction"
        }
    },
    {
        "concept_name": "抽象元类",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "不能被实例化的元类。位于元模型层，其作用不是直接用来定义应用系统的模型成分，而是作为元模型中其他一些元类的抽象概念。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "abstract metaclass"
        }
    },
    {
        "concept_name": "抽象工厂模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。提供相关的或相互依赖的一组待创建对象的接口，根据不同的配置或运行环境加载具有相同接口的不同类的实例。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "abstract factory pattern"
        }
    },
    {
        "concept_name": "抽象数据类型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "早期的程序设计把数据类型看成是一组数据的集合。如实数类型是实数的集合。而结构程序设计的先驱Liskov 和Zilles则把数据类型看成是与一组特定的操作及相关条件绑定的数据集合，称为抽象数据类型。例如栈（stack）就是一个抽象数据类型，与之绑定的操作包括进栈、退栈、空栈检查等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "abstract data type",
            "prerequisite": [
                "K_森林_计算机科学技术",
                "K_线性结构_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "抽象类",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "不需要直接创建对象实例的类。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "abstract class"
        }
    },
    {
        "concept_name": "持久对象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种在创建它的进程或线程不复存在时依然存在的对象。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "persistent object"
        }
    },
    {
        "concept_name": "指令跟踪",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对正在执行的程序指令进行跟踪的活动。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "instruction trace"
        }
    },
    {
        "concept_name": "接口",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软硬件系统的不同组成部分之间，或者系统与系统之间，以及系统与用户之间的一种连接机制。在软件系统与用户之间通常称为界面。在软件系统或者其组成部分之间，它描述了一个由接口提供者和需求者共同遵守的合约。同一个接口，对实现者而言称为供接口（provided interface），对使用者而言称为需接口（required interface）。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interface"
        }
    },
    {
        "concept_name": "接口定义语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "interface definition language ;IDL",
            "定义": "用于定义软件构件接口的语言。它分离了对象的接口与其实现。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interface definition language"
        }
    },
    {
        "concept_name": "接口描述语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "interface description language ;IDL",
            "定义": "一种用于描述软件构件接口的语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interface description language"
        }
    },
    {
        "concept_name": "接口规约",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "描述系统或构件的接口的规约。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interface specification"
        }
    },
    {
        "concept_name": "插装",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "将某些代码或指令插入至软件系统中，以监控该软件的运行。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "instrument"
        }
    },
    {
        "concept_name": "插装工具",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "执行插装的软件工具。它在被插装程序的适当位置上插入程序代码，以执行统计、度量、调试、跟踪等任务。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "instrumentation tool"
        }
    },
    {
        "concept_name": "操作",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "面向对象技术中一个用于描述对象行为特征的动作序列。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "operation"
        }
    },
    {
        "concept_name": "敏捷建模",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种基于成功的实践经验的高效建模和描述软件系统的方法。是敏捷软件开发的一部分。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agile modeling"
        }
    },
    {
        "concept_name": "敏捷方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种轻型软件开发方法。不要求遵循传统的软件开发流程，强调快速开发和有效适应需求变化，典型代表如极限编程、测试驱动开发等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agile method"
        }
    },
    {
        "concept_name": "敏捷软件开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "不介意于根据何种开发风范，以敏捷方法为主要原则进行的软件开发。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agile software development"
        }
    },
    {
        "concept_name": "数据流",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在一般语境下，泛指软件运行时系统中一组流动的数据。在结构化分析中，是数据流图中的一种模型元素，表示一组数据从一个加工流向另一个加工。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "dataflow",
            "prerequisite": [
                "K_资源共享_计算机科学技术",
                "K_地址_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "方案工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一门研究用工程化方法设计、开发、交付和维护有效、实用和高质量的方案的学科。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "solutions engineering"
        }
    },
    {
        "concept_name": "方面",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对软件系统横切关注点的抽象与封装。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "aspect"
        }
    },
    {
        "concept_name": "智能体建模语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于智能体的概念和思想对系统进行建模的语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent modeling language"
        }
    },
    {
        "concept_name": "智能体统一建模语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "agent unified modeling language ;AUML",
            "定义": "基于智能体的概念和思想对统一建模语言（UML）进行扩展，以对系统进行建模和分析的智能体建模语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent unified modeling language"
        }
    },
    {
        "concept_name": "最终用户",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "使用软件系统以实现其预定用途的个人或组织。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "end user",
            "prerequisite": [
                "K_数字签名_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "服务发现",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "根据请求方的要求从已有的服务中发现所需的服务。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service discovery"
        }
    },
    {
        "concept_name": "服务构件体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "service component architecture ;SCA",
            "又称": " 服务构件架构",
            "定义": "以服务化方式来开发构件并进行系统组装的软件系统实现规范。支持面向服务的体系结构（SOA）的编程模型及其支撑机制。实现对各类由不同方法实现的模块进行构件化封装，从而解决对异构模块的统一调用和集成问题。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service component architecture"
        }
    },
    {
        "concept_name": "服务编排",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "通过业务协作进行的万维网服务组合方式。描述多个参与者为实现多组织业务功能而进行的交互，主要描述不同流程之间的交互情况。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service choreography"
        }
    },
    {
        "concept_name": "服务编配",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "通过业务流程进行的万维网服务组合方式。描述使用一个中心流程来协调不同的万维网服务操作的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service orchestration"
        }
    },
    {
        "concept_name": "极限编程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种敏捷方法。提供了一组价值观、原则、实践和行为规范来指导软件系统的开发,提倡快速多次交付，以提高开发效率和适应用户需求的变更。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "extreme programming"
        }
    },
    {
        "concept_name": "构件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 组件",
            "定义": "（1）在一般语境中，泛指软件、硬件或任何其他系统的组成部分。（2）在软件复用和基于构件的软件工程中，特指按某种构件标准设计，并可在多个系统中重复使用的软件构造块。（3）在体系结构设计中，特指体系结构的基本要素之一，是软件和硬件系统基本构成元素的抽象。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "component"
        }
    },
    {
        "concept_name": "构件图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种展示构件的内部组织和构件之间相互关系的图，由构件、接口和连接件等主要元素构成。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "component diagram"
        }
    },
    {
        "concept_name": "构件组合",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "把多个小粒度构件组合为一个大粒度构件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "component composition"
        }
    },
    {
        "concept_name": "模块化方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件开发方法。它把一个待开发的软件分解成若干功能相对独立的模块，每一个模块都能独立地开发、测试，最后再组装出整个软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "modular method"
        }
    },
    {
        "concept_name": "模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）系统或其他事物及过程的抽象表示。（2）元模型体系结构中的一个层次，是元模型的一个实例。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "model"
        }
    },
    {
        "concept_name": "模型驱动的体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "model driven architecture ;MDA",
            "定义": "由对象管理组织（OMG）提出的一种软件体系结构。强调通过模型来指导体系结构的设计，以有利于对系统的理解、设计、构造、部署、操作、维护和修改。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "model driven architecture"
        }
    },
    {
        "concept_name": "模拟器",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 模拟程序",
            "定义": "完全基于主机程序并模拟了目标对象的功能和指令系统的程序。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "simulator"
        }
    },
    {
        "concept_name": "正交子状态",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 并发子状态(concurrent substate)",
            "定义": "两组互不排斥的子状态。被描述的事物在处于其中一组的某个子状态时，也可以同时处于另一组中的任何子状态。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "orthogonal substates"
        }
    },
    {
        "concept_name": "活动图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "统一建模语言（UML）的一种图，由各种动作结点、控制结点和它们之间的控制流、对象流等元素构成，用于描述一个活动的执行过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "activity diagram"
        }
    },
    {
        "concept_name": "测试覆盖率",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对测试完成程度的度量。它通常依据某种覆盖准则来对测试用例执行情况进行衡量，以判断测试执行得是否充分。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "test coverage"
        }
    },
    {
        "concept_name": "测试驱动的开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种敏捷软件开发方法。主张先依据待实现的功能来确定测试集，然后根据测试集要求来编写程序代码。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "test driven development"
        }
    },
    {
        "concept_name": "浏览器-服务器体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种面向网络应用的体系结构。人机交互在前端浏览器实现，业务逻辑在后台服务器中实现, 浏览器和服务器之间通过标准的超文本传输协议进行交互。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "browser-server architecture"
        }
    },
    {
        "concept_name": "消息",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在对象之间发送和接收的通信信息。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "message"
        }
    },
    {
        "concept_name": "演化模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件过程模型。一般从一个初始的可执行原型开始，进行分批迭代式开发。每次迭代都开发出一部分新功能，通过多次迭代不断地演化出整个软件系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "evolutionary model"
        }
    },
    {
        "concept_name": "版本升级",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "使用新版本软件替代旧版本软件的活动。一般对旧版本的漏洞打上补丁，或者通过添加新的应用功能来更新软件，使软件更加完善好用。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "version upgrade"
        }
    },
    {
        "concept_name": "独立测试组",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "independent test group ;ITG",
            "定义": "独立于项目研发组的专门负责测试的部门。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "independent test group"
        }
    },
    {
        "concept_name": "现货产品",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "已经开发出来的，可得到、可使用或需要加以修改后使用的产品。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "off-the-shelf product"
        }
    },
    {
        "concept_name": "用况",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对一项系统功能使用情况的刻画。其内容描述了系统的参与者在使用该项功能时与系统所进行的交互过程，以及系统对外界所呈现的行为。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "use case"
        }
    },
    {
        "concept_name": "用况图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种行为图，由系统的参与者、用况以及它们之间的关系构成的，用于建立系统的需求模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "use case diagram"
        }
    },
    {
        "concept_name": "用况模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "以用况图的方式建立的需求模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "use case model"
        }
    },
    {
        "concept_name": "用户文档",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "面向用户编写的文档。通常包括用户使用手册、用户安装手册等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "user documentation"
        }
    },
    {
        "concept_name": "用户需求",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用户对要设计的软件提出的各种要求，反映了用户对软件产品的期望。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "user requirements"
        }
    },
    {
        "concept_name": "程序摘要",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "以简明扼要的文句，将程序的主要内容，正确无误地摘录出来，使读者于最短的时间内得知程序的大意。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "program abstract"
        }
    },
    {
        "concept_name": "程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 编程",
            "定义": "设计、编制和调试程序的方法与过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "programming",
            "prerequisite": [
                "K_指令_计算机科学技术",
                "K_数组_计算机科学技术",
                "K_线性结构_计算机科学技术",
                "K_信号处理_计算机科学技术",
                "K_地址解析_计算机科学技术",
                "K_递归算法_计算机科学技术",
                "K_计算效率_数学"
            ]
        }
    },
    {
        "concept_name": "程序设计环境",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "支持程序开发的硬件工具与软件工具的汇集。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "programming environment"
        }
    },
    {
        "concept_name": "符号执行",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种程序分析技术。采用符号来代替实际数值进行程序的解释执行，并在执行过程中对程序的抽象状态进行检测。常用于生成测试用例或发现程序中的错误。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "symbolic execution"
        }
    },
    {
        "concept_name": "等价划分",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种黑盒测试方法，它将程序所有可能的输入或输出数据（有效的和无效的）划分成若干个等价类，然后从每个等价类中选取具有代表性的数据来设计测试用例进行测试，测试用例由有效等价类和无效等价类的代表组成，从而保证测试用例具有完整性和代表性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "equivalence partitioning"
        }
    },
    {
        "concept_name": "简单对象访问协议",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "simple object access protocol ;SOAP",
            "定义": "一个协议规范。用于万维网服务之间交换结构化的信息。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "simple object access protocol"
        }
    },
    {
        "concept_name": "粒度",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一个系统、一个软件、一组数据、一组操作需要按其组成成分分别描述或分别处理时，这些成分被分解的粗细程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "granularity"
        }
    },
    {
        "concept_name": "系统分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种以系统为对象，进行定性和定量的综合分析以找出所有可行解的分析方法。它侧重于从业务全过程的角度进行分析。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "system analysis"
        }
    },
    {
        "concept_name": "系统集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "包括设备系统集成和应用系统集成。将各个分离的设备、功能和信息等集成到相互关联的、统一和协调的系统之中，通过整合实现更强大的功能，同时使资源达到充分共享，实现集中、高效、便利的管理。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "system integration"
        }
    },
    {
        "concept_name": "组装连接件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种连接件。表示一个构件需要使用某个接口，而另一个构件提供了这个接口，二者通过该接口相互衔接。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "assembly connector"
        }
    },
    {
        "concept_name": "结构化分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "使用数据流图、结构图等手段分析软件系统的需求，建立分析模型的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "structured analysis"
        }
    },
    {
        "concept_name": "结构化分析与设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种分析与设计方法。包括结构化分析和结构化设计两个方面。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "structured analysis and design"
        }
    },
    {
        "concept_name": "结构化对等计算系统",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种对等计算系统。其计算结点间的逻辑拓扑关系通常是由某种分布式协议来严格控制，资源信息的放置也是由分布式协议来控制，精确放置在特定的结点上，例如DHT（分布式哈希表）系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "structured peer-to-peer systems"
        }
    },
    {
        "concept_name": "结构图",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于描述系统结构的图，包括对系统的组成部分及其相互关系的描述，是多种具有此类用途的图（如类图、构件图、包图等）的总称。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "structure diagram",
            "prerequisite": [
                "K_连接点_计算机科学技术",
                "K_非屏蔽双绞线_计算机科学技术",
                "K_广度优先搜索_计算机科学技术",
                "K_线性结构_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "统一建模语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "unified modeling language ;UML",
            "定义": "一种可视化建模语言。被对象管理组织（OMG）采纳作为建模语言规范，并经过多次修订。目前的版本为UML 2.x系列，包括基础结构、上层结构、图交换和对象描述语言等主要部分。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "unified modeling language"
        }
    },
    {
        "concept_name": "继承",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "超类与子类之间的一个关系。表明子类自动地拥有其超类的全部属性和操作。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "inheritance"
        }
    },
    {
        "concept_name": "维护阶段",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件生命周期的一个阶段。在软件开发完成并投入使用后，为继续适应用户需求，延续软件的使用寿命，对软件进行纠错或改进。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "maintenance phase"
        }
    },
    {
        "concept_name": "编配",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种基于集中控制模式的服务组合方式。参与组合的服务之间不直接交互，仅与控制中心交互。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "orchestration"
        }
    },
    {
        "concept_name": "网构软件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "部署和运行在互联网环境下，可感知环境变化，并随变化动态调整其功能、性能等，以更好满足用户需求的软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "internetware"
        }
    },
    {
        "concept_name": "聚合",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "类之间的一个二元关系，表示一个类的某些对象实例所描述的事物可作为另一个类的某些对象实例所描述的事物的组成部分。在统一建模语言（UML）中被视为关联的一种特殊情况。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "aggregation"
        }
    },
    {
        "concept_name": "能力成熟度模型集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "capability maturity model integration ;CMMI",
            "定义": "一种用于跨项目、部门或者整个组织的过程改进方法。结合了用于软件能力成熟度模型（SW-CMM）、系统工程能力模型（SECM）、集成产品开发能力成熟度模型（IPD-CMM），将它们融合到一个统一的改进框架内，为组织提供了在企业范围内过程改进的模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "capability maturity model integration"
        }
    },
    {
        "concept_name": "自主构件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种具有自主性的构件。能够根据环境的变化自动做出决策并执行相应的行为。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "autonomous component"
        }
    },
    {
        "concept_name": "自动测试生成器",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工具。它以计算机程序和准则作为输入，产生的是这些准则要求的测试输入数据，有时还确定预期的结果。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "automated test generator"
        }
    },
    {
        "concept_name": "自动程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "采用自动化手段进行程序设计的技术。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "automatic programming"
        }
    },
    {
        "concept_name": "自动验证工具",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于验证计算机软件的正确性、完全性、一致性、可跟踪性、可测试性等特性或者检查软件是否遵守相关标准的自动化软件工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "automated verification tool"
        }
    },
    {
        "concept_name": "自动验证系统",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "由一个或多个自动验证工具组成的软件系统。它以计算机程序及其规约作为输入（可能借助人的帮助），产生该程序的正确与否的证明。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "automated verification system"
        }
    },
    {
        "concept_name": "自底向上",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "从具体到抽象的方法。它从问题域的层次结构的最低层部分的具体操作开始，逐级向上直至最高层组成成分为止。如自底向上设计、自底向上编程、自底向上测试等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "bottom-up"
        }
    },
    {
        "concept_name": "自治计算",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "autonomic computing ;AC",
            "定义": "一种计算范型。参与计算的对象具有自我管理的能力以适应不可预测的变化，如自我监控、自我配置、自我优化和自我恢复等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "autonomic computing"
        }
    },
    {
        "concept_name": "自适应用户界面",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "能够根据用户使用交互界面的特点调节界面模式的用户界面。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "adaptive user interface"
        }
    },
    {
        "concept_name": "自适应软件开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "adaptive software development ;ASD",
            "定义": "一种基于系统论的敏捷软件开发方法。面对复杂、未知、多变的客观环境，ASD方法主张改变传统软件工程的确定性组织方式，以睿思代替规划，协作代替管理，多方收集反馈代替独断专行。用这个循环过程来指导软件系统的开发。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "adaptive software development"
        }
    },
    {
        "concept_name": "衍型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "统一建模语言（UML）定义的一种扩展机制。附加于基本建模元素之上，使之衍生为一个语义较为特殊的新的变种。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "stereotype"
        }
    },
    {
        "concept_name": "表示法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于对模型进行表达的文字或图形符号体系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "notation"
        }
    },
    {
        "concept_name": "被动对象",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "仅当被其他对象调用才可执行其自身行为的对象。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "passive object"
        }
    },
    {
        "concept_name": "观察者模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。定义一个对象与其他对象之间的一对多的依赖关系，当一个对象改变状态时，所有与它有依赖关系的对象都被通知并自动更新。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "observer pattern"
        }
    },
    {
        "concept_name": "解释器模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。定义了一个解释器，来解释给定语言和文法的句子。其实质是把语言中的每个符号定义成一个（对象）类，从而把每个程序转换成一个具体的对象树。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "interpreter pattern"
        }
    },
    {
        "concept_name": "计时分析程序",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种用于估计或度量计算机程序执行时间的软件工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "timing analyzer"
        }
    },
    {
        "concept_name": "计算机辅助软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "借助于一系列软件开发工具，辅助开发、维护和管理计算机软件的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "computer-aided software engineering"
        }
    },
    {
        "concept_name": "设计审查",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种正式的审查活动。通过由作者之外的人组成检查小组，检查设计文档中的错误、对相关标准的违反和其他问题。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "design inspection"
        }
    },
    {
        "concept_name": "质量属性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "反映软件产品某一方面质量的特征或特性。如可靠性、安全性、易用性等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "quality attribute"
        }
    },
    {
        "concept_name": "质量评价",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对软件产品满足特定需求的程度的评估。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "quality evaluation"
        }
    },
    {
        "concept_name": "软件体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 软件架构",
            "定义": "内容包括软件的组成元素、元素的外部的可见特性以及与其他元素的相互关系。其中，“外部的可见特性”包括系统提供的服务、性能、特性、错误处理、共享资源等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software architecture"
        }
    },
    {
        "concept_name": "软件体系结构评估",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "分析软件体系结构潜在的风险，并检验设计中提出的质量需求的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software architecture evaluation"
        }
    },
    {
        "concept_name": "软件体系结构风格",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 软件体系结构模式(software architecture pattern)",
            "定义": "描述了一类软件系统共有的结构和语义特性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software architecture style"
        }
    },
    {
        "concept_name": "软件即服务",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "software as a service ;SaaS",
            "定义": "一种通过互联网提供软件的模式。用户不必购买软件，而向提供商租用软件，且无需对软件进行维护，服务提供商会全责管理和维护软件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software as a service"
        }
    },
    {
        "concept_name": "软件复用",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 软件重用",
            "定义": "提高软件生产力和软件质量的一种技术。将已有软件的各种有关知识、文档、代码用于建立新的软件，以缩减软件开发和维护的花费。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software reuse"
        }
    },
    {
        "concept_name": "软件外包",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "通过合同将软件开发过程中的部分任务分包给第三方的商业行为。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software outsourcing"
        }
    },
    {
        "concept_name": "软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "运用计算机科学理论和技术以及工程管理原则和方法,按预算和进度要求开发和维护满足用户要求的软件产品的工程,或以此为研究对象的学科。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software engineering"
        }
    },
    {
        "concept_name": "软件工程工具",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于软件生命周期过程中，支持特定的软件工程方法。提高软件开发效率的各种工具软件与平台。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software engineering tools"
        }
    },
    {
        "concept_name": "软件工程方法学",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于软件开发和软件工程项目管理的方法、规则、假设、规程和过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software engineering methodology"
        }
    },
    {
        "concept_name": "软件工程环境",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "支持软件工程实践的整套平台工具和相关资源。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software engineering environment"
        }
    },
    {
        "concept_name": "软件工程经济学",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "从经济学的角度来研究、分析如何有效地开发、发布软件产品和支持用户使用软件产品的科学。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software engineering economics"
        }
    },
    {
        "concept_name": "软件开发方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件开发过程中所采用的理念和遵循的原则及步骤。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software development method"
        }
    },
    {
        "concept_name": "软件开发环境",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "支持软件工程化开发和维护所需的软硬件基础设施和资源的集合。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software development environment"
        }
    },
    {
        "concept_name": "软件开发计划",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件开发过程和软件开发方法的整体安排。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software development plan"
        }
    },
    {
        "concept_name": "软件潜行分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种用来识别和鉴定软件中的潜在问题的技术。这种技术可识别那些可能抑制期望的功能或者产生非期望功能的软件潜在状态。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software sneak analysis"
        }
    },
    {
        "concept_name": "软件生存周期",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 软件生命周期",
            "定义": "软件产品从构思开始至软件不再可用而被淘汰的时间周期。其时间范围涵盖了完整的软件开发周期，同时还包括软件验收后的操作和维护阶段。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software life cycle"
        }
    },
    {
        "concept_name": "软件经验数据",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在软件开发或使用过程中积累的各种数据。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software experience data"
        }
    },
    {
        "concept_name": "软件能力成熟度模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于评估软件组织过程规范和优化程度分级模型。包括初始级、可重复级、已定义级、已管理级和持续优化级等五个级别，下一级是上一级改进的基础。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software capability maturity model"
        }
    },
    {
        "concept_name": "软件自动化方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "使用自动化工具和技术，自动化生产软件的方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software automation method"
        }
    },
    {
        "concept_name": "软件获取",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件需求者或购买者获得软件产品、软件系统或软件服务的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software acquisition"
        }
    },
    {
        "concept_name": "软件评估",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对软件功能性、可靠性、易用性、效率、可维护性以及可移植性等进行的评估和测试，判断其是否符合需求和标准。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software evaluation"
        }
    },
    {
        "concept_name": "软件质量",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）软件产品中能满足给定需求（如规格说明）的性质和特性的总体。（2）软件具有所期望的各种属性的组合程度。（3）顾客和用户觉得软件满足其综合期望的程度。（4）确定软件在使用中将满足顾客预期要求的程度。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software quality"
        }
    },
    {
        "concept_name": "软件质量保证",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为确保软件产品、过程或服务的质量符合预定目标，而采取的有组织、有计划、贯穿软件生命周期的活动的集合。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software quality assurance"
        }
    },
    {
        "concept_name": "软件质量工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在软件产品的生存周期中，进行质量控制、质量保证和质量管理的工程过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software quality engineering"
        }
    },
    {
        "concept_name": "软件资产管理程序",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "将软件作为企业资产进行管理的软件工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software asset manager"
        }
    },
    {
        "concept_name": "软件过程工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "专门研究和改进软件过程的软件工程分支。包括：软件过程的描述与表示、软件过程自动化和控制软件过程演化的方法、工具和环境等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software process engineering"
        }
    },
    {
        "concept_name": "软件过程工程元模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "由对象管理组织（OMG）制定的软件过程的元模型规范。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software process engineering meta-model"
        }
    },
    {
        "concept_name": "软件错误",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一个通用的术语，用于表达造成不正确或者非预期结果和行为的软件故障（fault）、漏洞（flaw）和失效（failure）等。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software error"
        }
    },
    {
        "concept_name": "软件验收",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "按照一定标准检验软件，合格后收下软件的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software acceptance"
        }
    },
    {
        "concept_name": "软件验证",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "验证软件开发周期中的一个给定阶段的产品是否满足需求、质量、约束的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "software verification",
            "prerequisite": [
                "K_不可抵赖_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "边界值分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "又称": " 边界测试(boundary testing)",
            "定义": "对输入或输出的边界值进行测试的一种黑盒测试方法。通常作为对等价类划分法的补充，其测试用例来自等价类的边界。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "boundary value analysis"
        }
    },
    {
        "concept_name": "过程改进",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "为了满足新的目标，过程拥有者对过程所执行的一系列改进活动。包括对已有某个组织内软件过程的标识、分析和改变。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "process improvement"
        }
    },
    {
        "concept_name": "过程程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种程序设计范型。以过程（或函数、方法、子程序或例程等，因编程语言而异）作为构造程序的基本单位，其中包含了实现程序中某一功能的具体步骤，允许在程序执行的任意点对其进行调用。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "procedural programming"
        }
    },
    {
        "concept_name": "过程评估",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "选择一个与参考模型一致的过程模型，并以其为基准，对组织的软件过程进行原则性评价的活动。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "process assessment"
        }
    },
    {
        "concept_name": "运行可靠性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "系统或软件在实际使用环境中运行时的可靠性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "operational reliability"
        }
    },
    {
        "concept_name": "远程方法调用",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "remote method invocation ;RMI",
            "定义": "Java技术中，调用其他Java 虚拟机中的Java对象，实现分布式应用编程的技术。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "remote method invocation"
        }
    },
    {
        "concept_name": "连接点",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "程序流程中的点或位置，方面在该点或者位置与纵切的业务逻辑进行交互。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "join point",
            "prerequisite": [
                "K_广域网_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "迭代",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "具有重复过程的活动中，每一次对过程的重复被称为一次迭代。每一次迭代得到的结果会被用来作为下一次迭代的初始值，其目的通常是为了逼近所需的目标或结果。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "iteration",
            "prerequisite": [
                "K_二路归并_计算机科学技术",
                "K_后序遍历_计算机科学技术",
                "K_广度优先搜索_计算机科学技术",
                "K_广度优先搜索_计算机科学技术",
                "K_递归调用_计算机科学技术",
                "K_中序遍历_计算机科学技术",
                "K_后序遍历_计算机科学技术",
                "K_中序遍历_计算机科学技术",
                "K_递归算法_计算机科学技术",
                "K_层次遍历_计算机科学技术",
                "K_递归算法_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "迭代器模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。通过用迭代器访问一个容器中的全体对象，可以把相应的算法从容器中分离出来，以简化容器设计。但是也有一些与容器特性密切相关的算法，是不能从容器中分离的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "iterator pattern"
        }
    },
    {
        "concept_name": "迭代模型",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件过程模型。它将软件开发过程分为多次迭代。每一次的迭代都会产生一个可以发布的产品，这个产品是最终产品的一个子集。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "iterative model"
        }
    },
    {
        "concept_name": "适应性",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件系统能够满足环境变化和用户需求变化的能力。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "adaptability"
        }
    },
    {
        "concept_name": "适配器模式",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种设计模式。将一个类的接口转化成用户需要的另一种接口，可以解决系统间接口不相容的问题，从而提高复用性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "adapter pattern"
        }
    },
    {
        "concept_name": "逆向工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "通过分析软件系统后期制品，获取更高抽象度的前期模型的过程。是软件开发周期的反向过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "reverse engineering"
        }
    },
    {
        "concept_name": "通用描述、发现与集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "universal description discovery and integration ;UDDI",
            "定义": "一个用来发布和搜索万维网服务的协议。应用程序可通过此协议在设计或运行时找到目标服务。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "universal description discovery and integration"
        }
    },
    {
        "concept_name": "配置审核",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一个验证过程，确认为某个软件工程项目所需的计算机硬件、软件、中间件、数据库等组成部分在物理上和功效性能上都符合文档规定，文档准确齐全，所提出的更动请求均已满足。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "configuration audit"
        }
    },
    {
        "concept_name": "配置标识",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "配置管理的元素。由每个配置项编号、功能、性能和物理特性描述构成。它方便配置项的查找，并对其进行操作。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "configuration identification"
        }
    },
    {
        "concept_name": "配置状态报告",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种配置管理的元素。记录了有效地管理某一配置所需的信息。此信息包括列出经批准的配置标识表、建议变更的配置状态和经批准变更的实现状态。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "configuration status accounting"
        }
    },
    {
        "concept_name": "配置项",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "配置管理系统所管理的基本单元。包括配置管理涉及的各种开发文档、模型、代码等。每个配置项在配置管理过程中被作为单个实体来对待。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "configuration item",
            "prerequisite": [
                "K_访问路径_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "错误分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对观察到的软件错误进行分析，以找出发生错误的位置和错误原因，或者分析错误发生规律和趋势的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "error analysis"
        }
    },
    {
        "concept_name": "错误预测",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "对系统或部件预计的错误数或性质所做的定量陈述。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "error prediction"
        }
    },
    {
        "concept_name": "集成",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "（1）把多个软件、硬件（或两者兼有）合成为一个完整的系统的过程。（2）把多个系统进行整合，使之相互协同工作、信息共享的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "integration"
        }
    },
    {
        "concept_name": "集成测试",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "将所有模块按照设计要求（如根据结构图）组装成为子系统或系统后进行的测试。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "integration testing"
        }
    },
    {
        "concept_name": "需求分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "研究用户的要求，以对系统或软件的需求进行获取、分析、验证、评估，并形成需求规约的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "requirements analysis"
        }
    },
    {
        "concept_name": "需求审查",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种正式的审查活动。通过由作者之外的人组成检查小组，检查需求文档中的错误、对相关标准的违反和其他问题。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "requirements inspection"
        }
    },
    {
        "concept_name": "需求工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "软件工程的一个子领域，覆盖软件开发中所有与需求相关的开发和管理活动。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "requirements engineering"
        }
    },
    {
        "concept_name": "需求规约语言",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "用于描述软件功能需求和非功能需求的语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "requirements specification language"
        }
    },
    {
        "concept_name": "需求诱导",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种需求获取活动。通过综合运用各种手段，对利益相关者进行启发和诱导，以获得其需求。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "requirements elicitation"
        }
    },
    {
        "concept_name": "静态分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在不运行代码的情况下，通过语法分析、控制流分析等方法对程序代码进行扫描，分析代码是否满足规范性、安全性等指标的一种代码分析技术。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "static analysis"
        }
    },
    {
        "concept_name": "静态分析程序",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "支持静态分析的软件工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "static analyzer"
        }
    },
    {
        "concept_name": "非结构化对等计算系统",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种对等计算系统。其计算结点间的逻辑拓扑关系是通过随意的方式建立的。结点可以随时通过系统中的任意结点加入系统，按照某种松散关系与系统中的其他部分结点形成连接关系，资源的放置也不受严格控制。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "unstructured peer-to-peer systems"
        }
    },
    {
        "concept_name": "面向对象方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object-oriented method ;OO method",
            "定义": "一种把面向对象的概念、原理和方法应用于整个软件开发过程中，指导开发活动的系统方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented method"
        }
    },
    {
        "concept_name": "面向对象测试方法",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "针对面向对象技术的特殊性而采用的各种测试方法。广义地讲，它还包括对软件分析、设计和实现的一致性检查。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented testing method"
        }
    },
    {
        "concept_name": "面向对象的分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object-oriented analysis ;OOA",
            "定义": "一种分析方法。运用对象、类、继承、封装、聚合、关联、消息、多态性等面向对象概念进行系统分析，将问题域中的事物抽象为系统中的对象，识别对象的特征和各类对象之间的关系，建立一个映射问题域并能满足用户需求的面向对象分析模型，即OOA模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented analysis"
        }
    },
    {
        "concept_name": "面向对象的分析与设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object-oriented analysis and design ;OOAD",
            "定义": "一种分析与设计方法。包括面向对象的分析和面向对象的设计。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented analysis and design"
        }
    },
    {
        "concept_name": "面向对象的设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object-oriented design ;OOD",
            "定义": "一种设计方法。通常是在面向对象分析基础上，针对具体的实现平台，运用面向对象概念进行系统设计，建立一个可在该平台上实现的面向对象设计模型，即OOD模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented design"
        }
    },
    {
        "concept_name": "面向对象的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种软件工程方法。运用对象、类、继承、封装、聚合、关联、消息、多态性等面向对象概念进行软件系统分析、设计、实现、测试和维护。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented software engineering"
        }
    },
    {
        "concept_name": "面向对象程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "object-oriented programming ;OOP",
            "定义": "基于面向对象技术的程序设计范型。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的可复用性、灵活性和扩展性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "object-oriented programming"
        }
    },
    {
        "concept_name": "面向方面的程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "aspect-oriented programming ;AOP",
            "定义": "一种程序设计范型。以面向方面的软件开发为基本思想，针对分散在对象、类或函数中的横切关注点进行程序设计。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "aspect-oriented programming"
        }
    },
    {
        "concept_name": "面向方面的软件开发",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "aspect-oriented software development ;AOSD",
            "定义": "一种软件开发方法。利用方面对跨越多个模块的公共行为进行抽象和封装，通过织入机制将这些公共行为与功能模块融合在一起。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "aspect-oriented software development"
        }
    },
    {
        "concept_name": "面向智能体的方法学",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于智能体概念、思想和技术来支持系统分析、设计和实现的软件开发方法学。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent-oriented methodology"
        }
    },
    {
        "concept_name": "面向智能体的程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "agent-oriented programming ;AOP",
            "定义": "以智能体作为基本编程单元和运行单元的程序设计范型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent-oriented programming"
        }
    },
    {
        "concept_name": "面向智能体的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "agent-oriented software engineering ;AOSE",
            "定义": "基于智能体概念、思想和技术来支持软件系统工程化开发的方法、过程与工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent-oriented software engineering"
        }
    },
    {
        "concept_name": "面向智能体的需求工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "基于智能体的概念和思想来对系统需求进行获取、建模和分析的方法、过程与工具。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "agent-oriented requirements engineering"
        }
    },
    {
        "concept_name": "面向服务的体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "service-oriented architecture ;SOA",
            "又称": " 面向服务的架构",
            "定义": "一种包含服务提供者、服务请求者和服务中介，并且遵照开放的互操作协议来实现服务共享和组合的软件体系结构。将不同的服务通过定义良好的接口和协议联系起来，这使服务可以以一种统一和通用的方式进行交互，独立于硬件平台、操作系统和编程语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service-oriented architecture"
        }
    },
    {
        "concept_name": "面向服务的计算",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "service-oriented computing ;SOC",
            "定义": "一种将服务作为基本模块化单元的计算范型。其中服务是一种自治、开放、松耦合、可组合，以及与平台无关的网络化构件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service-oriented computing"
        }
    },
    {
        "concept_name": "面向服务的软件工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "service-oriented software engineering ;SOSE",
            "定义": "一种通过开发、组合和复用服务来构造软件系统的软件工程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "service-oriented software engineering"
        }
    },
    {
        "concept_name": "面向特征的程序设计",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "一种程序设计技术。通过在编程语言中引入特征的概念，将需求层次上软件特征的实现代码直接封装为编程语言中的特征，从而提高软件需求与实现代码之间的可追踪性，以及实现代码的可定制性和可复用性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "feature-oriented programming"
        }
    },
    {
        "concept_name": "面向特征的领域分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "英文": "feature-oriented domain analysis ;FODA",
            "定义": "一种把特征模型引入到领域工程的领域分析方法。在领域分析中，对领域中一类系统的标准特征及其关联约束进行分析和建模。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "feature-oriented domain analysis"
        }
    },
    {
        "concept_name": "项目文件",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "在项目实施过程中创建的各种文件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "project file"
        }
    },
    {
        "concept_name": "领域专用软件体系结构",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "描述一个应用领域中同一类软件系统的共同构造特征的软件体系结构。通常是领域设计的结果。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain-specific software architecture"
        }
    },
    {
        "concept_name": "领域分析",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "针对一类软件系统的共同应用领域和共同需求所进行的分析。旨在产生一个可在其中每个应用系统的开发中被复用的领域分析模型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain analysis"
        }
    },
    {
        "concept_name": "领域工程",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "针对一类软件系统的共同应用领域和共同需求所进行的工程活动。包括领域分析、领域设计等主要活动。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain engineering"
        }
    },
    {
        "concept_name": "领域工程师",
        "details": {
            "学科": "计算机科学技术_软件工程",
            "定义": "具有特定领域知识的工程师。在软件开发中负责领域建模和分析工作。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain engineer"
        }
    }
]