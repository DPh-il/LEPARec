[
    {
        "concept_name": "let记号",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "函数式语言中一种描述函数（或语句）中变量取值的符号体系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "let-notation"
        }
    },
    {
        "concept_name": "λ抽象",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "λ演算中定义函数的方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "λ-abstraction"
        }
    },
    {
        "concept_name": "λ表示法",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "λ演算系统中用来表示函数的方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "λ-notation"
        }
    },
    {
        "concept_name": "μ记号",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "形式系统中表示递归函数（不动点）的符号系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "μ-notation"
        }
    },
    {
        "concept_name": "π演算",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由罗宾·米尔纳（Robin Milner）等提出的可描述通信拓扑结构动态变化的进程演算。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "π-calculus"
        }
    },
    {
        "concept_name": "不动点",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "满足 f(x)=x 的 x ，称为函数 f 的不动点。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "fixed point"
        }
    },
    {
        "concept_name": "不动点归纳法",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "证明关于最小不动点的谓词成立的方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "fixed-point induction"
        }
    },
    {
        "concept_name": "不变式",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "在特定的计算过程中始终成立的性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "invariant"
        }
    },
    {
        "concept_name": "不确定性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "系统状态过程随机或者无规律可循的特性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "non-determinism"
        }
    },
    {
        "concept_name": "代数格",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一个格如果构成代数的完全偏序集，则称为代数格。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "algebraic lattice"
        }
    },
    {
        "concept_name": "代数的完全偏序集",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "英文": "algebraic complete partial order ;algebraic CPO",
            "定义": "完全偏序集 D 称为是代数的，如果对每个 x ∈ D ，小于等于 x 的 D 中紧致元素构成有向集。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "algebraic complete partial order"
        }
    },
    {
        "concept_name": "代数语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "用基调（一种非齐性代数）定义程序语言的语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "algebraic semantics"
        }
    },
    {
        "concept_name": "公理语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "用逻辑断言及其推理系统来描述程序设计语言的语义, 其典型代表是由托尼·霍尔（Tony Hoare）提出的霍尔公理语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "axiomatic semantics"
        }
    },
    {
        "concept_name": "函子",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "范畴间的保持结构的映射。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "functor"
        }
    },
    {
        "concept_name": "初始代数语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "简称": " 初始语义(initial semantics)",
            "定义": "代数规约中以满足等式公理的全体代数类中的初始代数作为语义。其中，初始代数是指一代数类中某个特殊代数 A ，使得对该代数类中每个代数 B，都存在唯一的保结构映射（即同态）h：A→B 。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "initial algebra semantics"
        }
    },
    {
        "concept_name": "动作表示法",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "动作语义描述中所使用的形式化表示方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "action notation"
        }
    },
    {
        "concept_name": "动作语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "指称语义、操作语义和代数语义的混合体，其动作由一个一阶语义项描述，可被执行或生成数据以及修改环境等，动作的表示法由操作语义来定义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "action semantics"
        }
    },
    {
        "concept_name": "动态语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一类程序形式语义。描述程序执行过程中状态信息的改变，例如用动态逻辑描述的语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "dynamic semantics"
        }
    },
    {
        "concept_name": "包容谓词",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "如果当谓词对递增序列（链）所有元素都成立（取值为真），它就对该序列的上确界也成立，那么该谓词是包容的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "inclusive predicates"
        }
    },
    {
        "concept_name": "单子",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "范畴论里面的一种函子，可用来进行数据结构的抽象封装，还被用来表示抽象计算概念的范畴论语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "monad"
        }
    },
    {
        "concept_name": "单子语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "用单子方法对程序语言系统进行语义解释。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "monadic semantics"
        }
    },
    {
        "concept_name": "单子转换器",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种组合单子的方法。可对一个给定的单子增加新的信息，从而可不断地构建更多的单子，并提升其相关的函数。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "monad transformer"
        }
    },
    {
        "concept_name": "卫式命令",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由荷兰计算机科学家埃德斯加·迪杰斯特拉（Edsger Dijkstra）提出的用于定义谓词转换语义的编程语言，其最基本的成分是带条件的赋值语句。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "guarded commands"
        }
    },
    {
        "concept_name": "双模拟",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "又称": " 互模拟",
            "定义": "在特定代数结构的所有运算下都能互相模拟的性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "bisimulation"
        }
    },
    {
        "concept_name": "反射",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种允许程序在运行时修改程序自身的行为和结构的机制。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "reflection"
        }
    },
    {
        "concept_name": "可判定性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "存在一个算法在有穷时间内给出“yes”或“no”答案。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "decidability"
        }
    },
    {
        "concept_name": "可区分的并",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种合并集合方法。与普通的集合并不同，其合并后元素可知道是来自哪个集合的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "disjoint union"
        }
    },
    {
        "concept_name": "可计算性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "又称": " 能行可解性",
            "定义": "针对某个问题类，存在一个可在有限步内结束的能行计算过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "computability"
        }
    },
    {
        "concept_name": "同余关系",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "在特定代数结构的所有运算下都保持的等价关系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "congruence relation"
        }
    },
    {
        "concept_name": "命令式语言",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "基于改变程序状态来描述计算过程的程序语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "imperative language"
        }
    },
    {
        "concept_name": "命名空间",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "将相关的类型进行分组的逻辑命名方案，以避免命名冲突。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "naming space"
        }
    },
    {
        "concept_name": "命题μ演算",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "在命题模态逻辑中引入最大、最小不动点算子得到的形式系统，可用于描述并发系统的时序性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "propositional μ-calculus"
        }
    },
    {
        "concept_name": "命题演算",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "数理逻辑中基本的形式系统，用于描述命题及其逻辑关系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "propositional calculus"
        }
    },
    {
        "concept_name": "域论",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由达纳·斯科特（Dana Scott）创建，是抽象代数的分支，研究论域的性质，成为指称语义的数学基础。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain theory"
        }
    },
    {
        "concept_name": "基调",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "抽象数据类型定义的语法部分，在其中声明该数据类型上所有运算的类别。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "signature"
        }
    },
    {
        "concept_name": "大步语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "又称": " 自然语义",
            "定义": "一种操作语义形式，描述程序所有的运行结果是如何得到的。它隐含了很多操作执行细节。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "big-step semantics"
        }
    },
    {
        "concept_name": "完全偏序集",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "英文": "complete partial order ;CPO",
            "又称": " 有向完全偏序集(directed complete partial order, DCPO)",
            "定义": "每个有向子集都有上确界的偏序集。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "complete partial order"
        }
    },
    {
        "concept_name": "完全格",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "所有子集都有上确界（并）和下确界（交）的格。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "complete lattice"
        }
    },
    {
        "concept_name": "完全正确性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "对符合要求的输入程序一定能终止并满足规约。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "total correctness"
        }
    },
    {
        "concept_name": "完备性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "形式系统的一种性质：语义上为真的推论都可以用推理规则在语法上推导出来。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "completeness"
        }
    },
    {
        "concept_name": "小步语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种操作语义形式。它详细描述了系统的各个计算步骤。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "small-step semantics"
        }
    },
    {
        "concept_name": "属性文法",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种经过扩充的上下文无关文法，其中每个非终极符包含上下文相关信息，称为属性。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "attribute grammars"
        }
    },
    {
        "concept_name": "平坦域",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种特殊论域，其元素间关系为要么相等要么没有（序）关系。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "flat domain"
        }
    },
    {
        "concept_name": "并发性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "多个相关计算过程同时执行或交叉执行，通过交互实现协作，以共同完成给定的计算任务。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "concurrency"
        }
    },
    {
        "concept_name": "形式规约",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "具有精确形式化语义的程序功能描述，是论证程序是否正确的依据。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "formal specification"
        }
    },
    {
        "concept_name": "形式语义学",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一门程序设计理论的学科。以数学为工具，利用符号和公式，精确定义和解释计算机程序设计语言的语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "formal semantics"
        }
    },
    {
        "concept_name": "急切计值",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "函数的参数在调用之前就被计算成值，然后以值进行传递。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "eager evaluation"
        }
    },
    {
        "concept_name": "惰性求值",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种将对函数或请求的处理延迟到真正需要结果时进行的计算方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "lazy evaluation"
        }
    },
    {
        "concept_name": "惰性语言",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "基于惰性求值的函数式语言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "lazy language"
        }
    },
    {
        "concept_name": "指称语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由克里斯托弗·斯特雷奇（Christopher Strachey）和达纳·斯科特（Dana Scott）在20世纪60年代开创的形式语义学，用与程序执行效果相对应的数学对象（称为指称）来描述程序结构含义，它将程序的每个部分都看成为某个相应指称。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "denotational semantics"
        }
    },
    {
        "concept_name": "按需调用",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种参数调用方法。仅当函数被实际计算时才去计算它的各个参数的值并传递给函数体。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "call-by-need"
        }
    },
    {
        "concept_name": "操作语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "将程序语义描述成抽象机或转换系统，对实际运行的程序结构含义进行描述，以此来模拟程序的执行的语义。它所关心的是程序“如何”产生其运行结果。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "operational semantics"
        }
    },
    {
        "concept_name": "斯科特前域",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "简称": " 斯科特域",
            "定义": "一种特殊的完全偏序集，其上界的所有子集都有上确界。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Scott predomain"
        }
    },
    {
        "concept_name": "最弱前置条件",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "保证一个语句执行正常结束并满足结果断言的最弱前提条件。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "weakest precondition"
        }
    },
    {
        "concept_name": "有向集",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "偏序集 D 的子集 M 称为是有向的，如果对于 M 的任一有限子集 M ′，都有 M ′的上界 x 在 M 中。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "directed set"
        }
    },
    {
        "concept_name": "构造算子",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一个函数，它以有限个数据类型为变元，函数值也是数据类型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "constructor"
        }
    },
    {
        "concept_name": "标准ML语言",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "ML语言的标准化版本。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "standard ML"
        }
    },
    {
        "concept_name": "模块单子语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "通过使用单子和单子转换器来描述程序的语义性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "modular monadic semantics"
        }
    },
    {
        "concept_name": "模型检查",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "通过搜索状态空间来验证有穷状态并发系统是否满足以时态逻辑公式描述的性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "model checking"
        }
    },
    {
        "concept_name": "模态逻辑",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "逻辑的一个分支，它研究必然、可能及其相关概念的逻辑性质。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "modal logic"
        }
    },
    {
        "concept_name": "正确性证明",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "证明程序满足其规约的过程。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "correctness proof"
        }
    },
    {
        "concept_name": "泛函",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "以函数为自变量的函数。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "functional"
        }
    },
    {
        "concept_name": "混合语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "同时利用多种语义框架来描述程序语义的方法。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "hybrid semantics"
        }
    },
    {
        "concept_name": "状态转换器",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "把命令抽象地表示成程序状态空间上的转换函数。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "state transformer"
        }
    },
    {
        "concept_name": "程序正确性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "程序是否满足给定的规约。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "program correctness"
        }
    },
    {
        "concept_name": "等式类型构子",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种函子，用于构造基于已知类型之上的抽象类型。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "equality type constructor"
        }
    },
    {
        "concept_name": "等式逻辑",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "以等式符号为唯一谓词符号的一阶逻辑，是一种通过等式替换进行推理的形式系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "equational logic"
        }
    },
    {
        "concept_name": "类型代换",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "从类型变量到类型表达式的函数。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "type substitution"
        }
    },
    {
        "concept_name": "类型系统",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "对编程语言中的各种成分（如数值、变量、表达式等）赋以类型属性的规则的总称。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "type system"
        }
    },
    {
        "concept_name": "类型论",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "最初由罗素为了避免集合论中的悖论而提出的形式系统，其后有了很多发展，并且与编程语言的类型系统密切相关。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "type theory"
        }
    },
    {
        "concept_name": "紧致元素",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "又称": " 有限元素",
            "定义": "完全偏序集 D 的一个元素 x 称为是紧致的，如果对 D 中的任意有向子集 M ，使得 x 小于等于 M 的上极限者，必有 M 中元素 y ，使得 x 小于等于 y 。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "compact element"
        }
    },
    {
        "concept_name": "约束变量",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "表达式中被相关量词（如全称量词或存在量词等）约束的变量。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "bound variable"
        }
    },
    {
        "concept_name": "组合代数",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种代数系统，被用来研究包含分配组合子和消去组合子的逻辑系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "combinatory algebra"
        }
    },
    {
        "concept_name": "组合逻辑",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种不基于集合论的逻辑形式系统，常包含恒等、分配和消去三个组合子。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "combinatory logic",
            "prerequisite": [
                "K_编码器_计算机科学技术"
            ]
        }
    },
    {
        "concept_name": "终止性证明",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "证明对所有符合要求的输入程序都将终止。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "termination proof"
        }
    },
    {
        "concept_name": "终结代数语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "简称": " 终结语义(terminal semantics)",
            "定义": "代数规约中以满足等式公理的全体代数类中的终结代数作为语义。其中，终结代数是指一代数类中某个特殊代数 A，使得对该代数类中每个代数B，都存在唯一的保结构映射（即同态）h：B→A 。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "terminal algebra semantics"
        }
    },
    {
        "concept_name": "结构化操作语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由计算机科学家普洛特金（Plotkin）提出的一种操作语义形式，其特点是按程序语言的语法结构来定义语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "structural operational semantics"
        }
    },
    {
        "concept_name": "继续",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "剑桥学派指称语义中表示从程序某点开始直至运行结束的全部语义。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "continuation"
        }
    },
    {
        "concept_name": "范畴语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "以范畴论为工具建立程序语言的语义理论。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "categorical semantics"
        }
    },
    {
        "concept_name": "计算可行",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "在一定时间和空间约束下计算的可行性，通常理解为多项式时间内可计算的。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "computational feasibility"
        }
    },
    {
        "concept_name": "论域",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一个完全偏序集。它是代数的，并且它的紧致元素集是可数的。在指称语义中，程序的语义用论域中的元素表示。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "domain"
        }
    },
    {
        "concept_name": "语义规约",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "能够描述通用构件的接口语法和语义规范的形式化说明。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "semantic specification"
        }
    },
    {
        "concept_name": "语境",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "语言（自然语言或人工语言）上下文环境。它包括语言因素，也包括非语言因素（特别是当涉及自然语言的时候）。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "context"
        }
    },
    {
        "concept_name": "谓词演算",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "又称": " 一阶逻辑",
            "定义": "数理逻辑最基本的形式系统，在命题演算的基础上扩展引入了客体变元、量词、谓词和函数。其中，客体表示某一个物体或元素，量词（如全称或存在）限定客体数量，谓词描述客体的一种属性，函数代表抽象的计算。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "predicate calculus"
        }
    },
    {
        "concept_name": "谓词转换器",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由埃德斯加·迪杰斯特拉（Edsger Dijkstra）引进的描述程序语义的方法，把程序的执行看成是状态空间上的谓词转换。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "predicate transformer"
        }
    },
    {
        "concept_name": "谓词转换语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一种公理语义，它包含了有关语句执行前后变量值的断言。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "predicate transformer semantics"
        }
    },
    {
        "concept_name": "通信系统演算",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由罗宾·米尔纳（Robin Milner）创建的一种进程代数，用于描述通信并发系统的代数理论。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "calculus of communicating systems"
        }
    },
    {
        "concept_name": "通信顺序进程",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由托尼·霍尔（Tony Hoare）创建的一种进程代数，用于描述并发系统交互模式的形式系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "communicating sequential processes"
        }
    },
    {
        "concept_name": "部分正确性",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "对给定的输入，程序只要终止就一定满足规约。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "partial correctness"
        }
    },
    {
        "concept_name": "闭表达式",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "不含自由变元的表达式。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "closed expression"
        }
    },
    {
        "concept_name": "霍尔逻辑",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "由英国计算机科学家托尼·霍尔（Tony Hoare）提出的用于验证程序正确性的推理系统。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "Hoare logic"
        }
    },
    {
        "concept_name": "静态语义",
        "details": {
            "学科": "计算机科学技术_理论计算机科学_程序理论",
            "定义": "一类程序形式语义。涉及到程序形式合法性的检查，与编译时的各种动作对应，它与程序运行时所需的输入无关。",
            "见载": "《计算机科学技术名词 》第三版",
            "英文名": "static semantics"
        }
    }
]